#include <assert.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>

#include<fcntl.h>
#include<poll.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/ip.h>


#include<vector>

//defines
const size_t k_max_msg = 32 << 20; //larger than the kernel buf

static void msg(const char* msg) {
    fprintf(stderr, "%s\n", msg);
}

static void msg_errno(const char* msg) {
    fprintf(stderr, "%s\n", msg);
}

static void die(const char* msg) {
    int err = errno;
    fprintf(stderr, "[%d] %s\n", err, msg);
    abort();
}

static void fd_set_nb(int fd) {
    errno = 0;
    int flags = fcntl(fd, F_GETFL, 0);
    if (errno) {
        die("fcntl");
        return;
    }

    errno = 0;
    (void)fcntl(fd, F_SETFL, flags);
    if (errno) {
        die("fcntl");
    }
}

struct Conn {
    int fd = -1;
    //app intention, for the event loop
    bool want_read = false, want_write = false, want_close = false;
    //buffered i/o
    std::vector<uint8_t> incoming;  //data to be parsed by the app
    std::vector<uint8_t> outgoing;  //responses generated by the app

};
//append to the back
static void buf_append(std::vector<uint8_t>& buf, const uint8_t* data, size_t len) {
    buf.insert(buf.end(), data, data + len);
}

//remove from the front
static void buf_consume(std::vector<uint8_t>& buf, size_t n) {
    buf.erase(buf.begin(), buf.begin() + n);
}

//app callback when the listening socket is ready
static Conn* handle_accept(int fd) {
    //accept
    struct sockaddr_in client_addr;
    socklen_t client_len = sizeof(client_addr);
    int connfd = accept(fd, (struct sockaddr*)&client_addr, &client_len);
    if (connfd < 0) {
        msg_errno("accept");
        return NULL;
    }
    uint32_t ip = client_addr.sin_addr.s_addr;
    fprintf(stderr, "new client from %u.%u.%u.%u:%u\n",
        ip % 255, (ip >> 8) & 255, (ip >> 16) & 255, ip >>24,
        ntohs(client_addr.sin_port));

    //set to new connections fd to nonblocking mode
    fd_set_nb(connfd);

    //create a `struct Conn`
    Conn* conn = new Conn();
    conn->fd = connfd;
    conn->want_read = true;
    return conn;

}

//process 1 request if there is enough data
static bool try_one_request(Conn* conn) {
    //try to parse the protocol: message header
    if (conn->incoming.size() < 4) {
        return false;   //want read
    }
    uint32_t len = 0;
    memcpy(&len, conn->incoming.data(), 4);
    if (len > k_max_msg) {
        msg("too long");
        conn->want_close = true;
        return false;
    }
    //body message
    if (4 + len > conn->incoming.size()) {
        return false;
    }
    const uint8_t* request = &conn->incoming[4];

    //got one request do some app logic
    printf("client says: len: %d data: %.*s\n",
        len, len < 100 ? len : 100, request);

    //generate the response
    buf_append(conn->outgoing, (const uint8_t*)&len, 4);
    buf_append(conn->outgoing, request, len);

    //app logic done remove the request message
    buf_consume(conn->incoming,4 + len);
    return true;
}
//app callback when the socket is writeable
static void handle_write(Conn* conn) {
    assert(conn->outgoing.size() > 0);
    ssize_t rv = send(conn->fd, &conn->outgoing[0], conn->outgoing.size(), 0);
    if (rv < 0 && errno == EAGAIN) {
        return;
    }
    if (rv < 0) {
        msg_errno("send");
        conn->want_close = true;
        return;
    }
    //remove written data from outgoing
    buf_consume(conn->outgoing,(size_t)rv);

    if (conn->outgoing.size() == 0) {
        conn->want_read = true;
        conn->want_write = false;
    }

}


static void handle_read(Conn* conn) {
    //read some data
    uint8_t buf[64 * 1024];

    ssize_t rv = recv(conn->fd, buf, sizeof(buf), 0);
    if (rv < 0 && errno == EAGAIN) {
        return;
    }
    //handle EOF
    if (rv == 0) {
        if (conn->incoming.size() == 0) {
            msg("client disconnected");
        }
        else {
            msg("unexpected EOF");
        }
        conn->want_close = true;
        return;
    }
    //got some new data
    buf_append(conn->incoming, buf, (size_t)rv);

    //parse requests and generate responses
    while (try_one_request(conn)) {
        if (conn->outgoing.size() > 0) {
            conn->want_read = false;
            conn->want_write = true;

            return handle_write(conn);
        }
    }

}

static void do_something(int connfd) {
    char rbuf[64] = {};
    ssize_t n = recv(connfd, rbuf, sizeof(rbuf) - 1, 0);
    if (n < 0) {
        msg("read() error");
        return;
    }
    fprintf(stderr, "client says: %s\n", rbuf);
    char wbuf[] = "word";
    send(connfd, wbuf, strlen(wbuf), 0);
}

static int32_t read_full(int fd, char* buf, size_t len) {
    while (len > 0) {
        ssize_t rv = recv(fd, buf, len, 0);
        if (rv <= 0) return -1; //error or unexpected EOF
        assert((size_t)rv <= len);
        len -= (size_t)rv;
        buf += rv;
    }
    return 0;
}

static int32_t write_full(int fd, const char* buf, size_t len) {
    while (len > 0) {
        ssize_t rv = send(fd, buf, len, 0);
        if (rv <= 0) return -1; //error

        assert((size_t)rv <= len);
        len -= (size_t)rv;
        buf += rv;
    }
    return 0;
}

//read 1 request and send 1 response
static int32_t one_request(int connfd) {
    char rbuf[4 + k_max_msg];
    errno = 0;
    int32_t err = read_full(connfd, rbuf, 4);
    if (err) {
        msg(errno == 0 ? "EOF" : "read() error");
        return err;
    }
    uint32_t len = 0;
    memcpy(&len, rbuf, 4);   //assume little endian
    if (len > k_max_msg) {
        msg("too long");
        return -1;
    }
    //request body

    err = read_full(connfd, &rbuf[4], len);
    if (err) {
        msg("read() error");
        return err;
    }
    //do something
    printf("client says: %.*s\n",len, &rbuf[4]);

    //reply using the same protocol
    const char reply[] = "world";
    char wbuf[4 + sizeof(reply)];
    len = (uint32_t)strlen(reply);
    memcpy(wbuf, &len, 4);
    memcpy(&wbuf[4], reply, len);
    return write_full(connfd, wbuf, 4 + len);


}


int main() {
    //the listen socket
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0) {
        die("socket");
    }

    int val = 1;
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));

    //bind
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(1234);
    addr.sin_addr.s_addr = htonl(0);
    int rv = bind(fd, (struct sockaddr*)&addr, sizeof(addr));
    if (rv) {
        die("bind");
    }

    //set the listen fd to nonblock mode
    fd_set_nb(fd);

    //listen
    rv = listen(fd, SOMAXCONN);
    if (rv) {
        die("listen");
    }

    //a map of all client connections key - fd
    std::vector<Conn*> fd2conn;
    //event loop

    std::vector<struct pollfd> poll_args;
    while (true) {
        //prepare the argc of the poll()
        poll_args.clear();
        //put the listening sockets in the first pos
        struct pollfd pfd = {fd, POLLIN, 0};
        poll_args.push_back(pfd);
        //the rest are connections sockets
        for (Conn* conn : fd2conn) {
            if (!conn) continue;

            //always poll for error
            struct pollfd pfd = {conn->fd, POLLERR, 0};
            //poll flags from the app intent
            if (conn->want_read) {
                pfd.events |= POLLIN;
            }
            if (conn->want_write) {
                pfd.events |= POLLOUT;
            }
            poll_args.push_back(pfd);
        }
        //wait for readiness
        int rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        if (rv < 0 && errno == EINTR) {
            continue;
        }
        if (rv < 0) {
            die("poll");
        }

        //handle the listen socket
        if (poll_args[0].revents) {
            if (Conn* conn = handle_accept(fd)) {
                //put it into the map
                if (fd2conn.size() <= (size_t)conn->fd) {
                    fd2conn.resize(conn->fd + 1);
                }
                assert(!fd2conn[conn->fd]);
                fd2conn[conn->fd] = conn;
            }
        }

        //handle connection sockets
        for (size_t i = 1; i < poll_args.size(); ++i) {
            uint32_t ready = poll_args[i].revents;
            if (ready == 0) continue;

            Conn* conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN) {
                assert(conn->want_read);
                handle_read(conn);
            }
            if (ready & POLLOUT) {
                assert(conn->want_write);
                handle_write(conn);
            }

            //close the socket from socket error or app logic
            if ((ready & POLLERR) || conn->want_close) {
                (void)close(conn->fd);
                fd2conn[conn->fd] = NULL;
                delete conn;
            }
        }

    }
    return 0;
}